// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum IdeaStatus {
  DRAFT
  PUBLISHED
  IN_REVIEW
  APPROVED
  REJECTED
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ideas         Idea[]      @relation("AuthoredIdeas")
  collaborating Idea[]      @relation("Collaborators")
  comments      Comment[]
  likes         IdeaLike[]
  following     IdeaFollow[]
}

model Idea {
  id          String     @id @default(uuid())
  title       String
  description String
  status      IdeaStatus @default(DRAFT)
  visibility  Visibility @default(PRIVATE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  author        User        @relation("AuthoredIdeas", fields: [authorId], references: [id])
  authorId      String
  collaborators User[]      @relation("Collaborators")
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    String
  tags          Tag[]
  comments      Comment[]
  likes         IdeaLike[]
  followers     IdeaFollow[]

  @@index([authorId])
  @@index([categoryId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  idea      Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  parentId  String?
  replies   Comment[] @relation("CommentReplies")

  @@index([ideaId])
  @@index([authorId])
  @@index([parentId])
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ideas       Idea[]
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())

  // Relations
  ideas     Idea[]
}

model IdeaLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // Relations
  idea      Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([ideaId, userId])
  @@index([ideaId])
  @@index([userId])
}

model IdeaFollow {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // Relations
  idea      Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([ideaId, userId])
  @@index([ideaId])
  @@index([userId])
} 